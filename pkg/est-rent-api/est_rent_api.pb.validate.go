// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ozonmp/est_rent_api/v1/est_rent_api.proto

package est_rent_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Rent with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for RenterId

	// no validation rules for ObjectType

	// no validation rules for ObjectInfo

	// no validation rules for Period

	// no validation rules for PriceDecimal

	return nil
}

// RentValidationError is the validation error returned by Rent.Validate if the
// designated constraints aren't met.
type RentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RentValidationError) ErrorName() string { return "RentValidationError" }

// Error satisfies the builtin error interface
func (e RentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RentValidationError{}

// Validate checks the field values on CreateRentV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRentV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRenterId() <= 0 {
		return CreateRentV1RequestValidationError{
			field:  "RenterId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetObjectType()); l < 2 || l > 50 {
		return CreateRentV1RequestValidationError{
			field:  "ObjectType",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetObjectInfo()); l < 2 || l > 100 {
		return CreateRentV1RequestValidationError{
			field:  "ObjectInfo",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	if m.GetPeriod() <= 0 {
		return CreateRentV1RequestValidationError{
			field:  "Period",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetPriceDecimal()); l < 2 || l > 100 {
		return CreateRentV1RequestValidationError{
			field:  "PriceDecimal",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
	}

	return nil
}

// CreateRentV1RequestValidationError is the validation error returned by
// CreateRentV1Request.Validate if the designated constraints aren't met.
type CreateRentV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRentV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRentV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRentV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRentV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRentV1RequestValidationError) ErrorName() string {
	return "CreateRentV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRentV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRentV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRentV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRentV1RequestValidationError{}

// Validate checks the field values on CreateRentV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRentV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRentV1ResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateRentV1ResponseValidationError is the validation error returned by
// CreateRentV1Response.Validate if the designated constraints aren't met.
type CreateRentV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRentV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRentV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRentV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRentV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRentV1ResponseValidationError) ErrorName() string {
	return "CreateRentV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRentV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRentV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRentV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRentV1ResponseValidationError{}

// Validate checks the field values on DescribeRentV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeRentV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRentId() <= 0 {
		return DescribeRentV1RequestValidationError{
			field:  "RentId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeRentV1RequestValidationError is the validation error returned by
// DescribeRentV1Request.Validate if the designated constraints aren't met.
type DescribeRentV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeRentV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeRentV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeRentV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeRentV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeRentV1RequestValidationError) ErrorName() string {
	return "DescribeRentV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeRentV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeRentV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeRentV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeRentV1RequestValidationError{}

// Validate checks the field values on DescribeRentV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeRentV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeRentV1ResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeRentV1ResponseValidationError is the validation error returned by
// DescribeRentV1Response.Validate if the designated constraints aren't met.
type DescribeRentV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeRentV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeRentV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeRentV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeRentV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeRentV1ResponseValidationError) ErrorName() string {
	return "DescribeRentV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeRentV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeRentV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeRentV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeRentV1ResponseValidationError{}

// Validate checks the field values on ListRentV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRentV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetFromRentId() <= 0 {
		return ListRentV1RequestValidationError{
			field:  "FromRentId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetLimit() <= 1 {
		return ListRentV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 1",
		}
	}

	return nil
}

// ListRentV1RequestValidationError is the validation error returned by
// ListRentV1Request.Validate if the designated constraints aren't met.
type ListRentV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRentV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRentV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRentV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRentV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRentV1RequestValidationError) ErrorName() string {
	return "ListRentV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRentV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRentV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRentV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRentV1RequestValidationError{}

// Validate checks the field values on ListRentV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRentV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRentV1ResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRentV1ResponseValidationError is the validation error returned by
// ListRentV1Response.Validate if the designated constraints aren't met.
type ListRentV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRentV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRentV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRentV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRentV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRentV1ResponseValidationError) ErrorName() string {
	return "ListRentV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRentV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRentV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRentV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRentV1ResponseValidationError{}

// Validate checks the field values on RemoveRentV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveRentV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRentId() <= 0 {
		return RemoveRentV1RequestValidationError{
			field:  "RentId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveRentV1RequestValidationError is the validation error returned by
// RemoveRentV1Request.Validate if the designated constraints aren't met.
type RemoveRentV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRentV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRentV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRentV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRentV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRentV1RequestValidationError) ErrorName() string {
	return "RemoveRentV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRentV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRentV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRentV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRentV1RequestValidationError{}

// Validate checks the field values on RemoveRentV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveRentV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveRentV1ResponseValidationError is the validation error returned by
// RemoveRentV1Response.Validate if the designated constraints aren't met.
type RemoveRentV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRentV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRentV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRentV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRentV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRentV1ResponseValidationError) ErrorName() string {
	return "RemoveRentV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRentV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRentV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRentV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRentV1ResponseValidationError{}
